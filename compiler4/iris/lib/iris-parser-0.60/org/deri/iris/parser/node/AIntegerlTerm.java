/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.deri.iris.parser.node;

import org.deri.iris.parser.analysis.*;

@SuppressWarnings("nls")
public final class AIntegerlTerm extends PTerm
{
    private TTPreInteger _tPreInteger_;
    private TTLpar _tLpar_;
    private TTInt _tInt_;
    private TTRpar _tRpar_;

    public AIntegerlTerm()
    {
        // Constructor
    }

    public AIntegerlTerm(
        @SuppressWarnings("hiding") TTPreInteger _tPreInteger_,
        @SuppressWarnings("hiding") TTLpar _tLpar_,
        @SuppressWarnings("hiding") TTInt _tInt_,
        @SuppressWarnings("hiding") TTRpar _tRpar_)
    {
        // Constructor
        setTPreInteger(_tPreInteger_);

        setTLpar(_tLpar_);

        setTInt(_tInt_);

        setTRpar(_tRpar_);

    }

    @Override
    public Object clone()
    {
        return new AIntegerlTerm(
            cloneNode(this._tPreInteger_),
            cloneNode(this._tLpar_),
            cloneNode(this._tInt_),
            cloneNode(this._tRpar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntegerlTerm(this);
    }

    public TTPreInteger getTPreInteger()
    {
        return this._tPreInteger_;
    }

    public void setTPreInteger(TTPreInteger node)
    {
        if(this._tPreInteger_ != null)
        {
            this._tPreInteger_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tPreInteger_ = node;
    }

    public TTLpar getTLpar()
    {
        return this._tLpar_;
    }

    public void setTLpar(TTLpar node)
    {
        if(this._tLpar_ != null)
        {
            this._tLpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLpar_ = node;
    }

    public TTInt getTInt()
    {
        return this._tInt_;
    }

    public void setTInt(TTInt node)
    {
        if(this._tInt_ != null)
        {
            this._tInt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tInt_ = node;
    }

    public TTRpar getTRpar()
    {
        return this._tRpar_;
    }

    public void setTRpar(TTRpar node)
    {
        if(this._tRpar_ != null)
        {
            this._tRpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRpar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tPreInteger_)
            + toString(this._tLpar_)
            + toString(this._tInt_)
            + toString(this._tRpar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tPreInteger_ == child)
        {
            this._tPreInteger_ = null;
            return;
        }

        if(this._tLpar_ == child)
        {
            this._tLpar_ = null;
            return;
        }

        if(this._tInt_ == child)
        {
            this._tInt_ = null;
            return;
        }

        if(this._tRpar_ == child)
        {
            this._tRpar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tPreInteger_ == oldChild)
        {
            setTPreInteger((TTPreInteger) newChild);
            return;
        }

        if(this._tLpar_ == oldChild)
        {
            setTLpar((TTLpar) newChild);
            return;
        }

        if(this._tInt_ == oldChild)
        {
            setTInt((TTInt) newChild);
            return;
        }

        if(this._tRpar_ == oldChild)
        {
            setTRpar((TTRpar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
