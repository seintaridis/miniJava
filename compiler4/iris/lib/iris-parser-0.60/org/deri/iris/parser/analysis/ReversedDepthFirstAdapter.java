/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.deri.iris.parser.analysis;

import java.util.*;
import org.deri.iris.parser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inARuleExpr(ARuleExpr node)
    {
        defaultIn(node);
    }

    public void outARuleExpr(ARuleExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuleExpr(ARuleExpr node)
    {
        inARuleExpr(node);
        if(node.getRule() != null)
        {
            node.getRule().apply(this);
        }
        outARuleExpr(node);
    }

    public void inAFactExpr(AFactExpr node)
    {
        defaultIn(node);
    }

    public void outAFactExpr(AFactExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactExpr(AFactExpr node)
    {
        inAFactExpr(node);
        if(node.getFact() != null)
        {
            node.getFact().apply(this);
        }
        outAFactExpr(node);
    }

    public void inAQueryExpr(AQueryExpr node)
    {
        defaultIn(node);
    }

    public void outAQueryExpr(AQueryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQueryExpr(AQueryExpr node)
    {
        inAQueryExpr(node);
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        outAQueryExpr(node);
    }

    public void inARule(ARule node)
    {
        defaultIn(node);
    }

    public void outARule(ARule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARule(ARule node)
    {
        inARule(node);
        if(node.getTDot() != null)
        {
            node.getTDot().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getTImpliedby() != null)
        {
            node.getTImpliedby().apply(this);
        }
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outARule(node);
    }

    public void inAFact(AFact node)
    {
        defaultIn(node);
    }

    public void outAFact(AFact node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFact(AFact node)
    {
        inAFact(node);
        if(node.getTDot() != null)
        {
            node.getTDot().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAFact(node);
    }

    public void inAQuery(AQuery node)
    {
        defaultIn(node);
    }

    public void outAQuery(AQuery node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuery(AQuery node)
    {
        inAQuery(node);
        if(node.getTDot() != null)
        {
            node.getTDot().apply(this);
        }
        if(node.getLitlist() != null)
        {
            node.getLitlist().apply(this);
        }
        if(node.getTQuery() != null)
        {
            node.getTQuery().apply(this);
        }
        outAQuery(node);
    }

    public void inALitlist(ALitlist node)
    {
        defaultIn(node);
    }

    public void outALitlist(ALitlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALitlist(ALitlist node)
    {
        inALitlist(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALitlist(node);
    }

    public void inAAndLitlist(AAndLitlist node)
    {
        defaultIn(node);
    }

    public void outAAndLitlist(AAndLitlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndLitlist(AAndLitlist node)
    {
        inAAndLitlist(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        if(node.getTAnd() != null)
        {
            node.getTAnd().apply(this);
        }
        if(node.getLitlist() != null)
        {
            node.getLitlist().apply(this);
        }
        outAAndLitlist(node);
    }

    public void inACommaLitlist(ACommaLitlist node)
    {
        defaultIn(node);
    }

    public void outACommaLitlist(ACommaLitlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaLitlist(ACommaLitlist node)
    {
        inACommaLitlist(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getLitlist() != null)
        {
            node.getLitlist().apply(this);
        }
        outACommaLitlist(node);
    }

    public void inANegatedLiteral(ANegatedLiteral node)
    {
        defaultIn(node);
    }

    public void outANegatedLiteral(ANegatedLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegatedLiteral(ANegatedLiteral node)
    {
        inANegatedLiteral(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getTNot() != null)
        {
            node.getTNot().apply(this);
        }
        outANegatedLiteral(node);
    }

    public void inALiteral(ALiteral node)
    {
        defaultIn(node);
    }

    public void outALiteral(ALiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteral(ALiteral node)
    {
        inALiteral(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outALiteral(node);
    }

    public void inABuiltinLiteral(ABuiltinLiteral node)
    {
        defaultIn(node);
    }

    public void outABuiltinLiteral(ABuiltinLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABuiltinLiteral(ABuiltinLiteral node)
    {
        inABuiltinLiteral(node);
        if(node.getBuiltin() != null)
        {
            node.getBuiltin().apply(this);
        }
        outABuiltinLiteral(node);
    }

    public void inANegatedbuiltinLiteral(ANegatedbuiltinLiteral node)
    {
        defaultIn(node);
    }

    public void outANegatedbuiltinLiteral(ANegatedbuiltinLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegatedbuiltinLiteral(ANegatedbuiltinLiteral node)
    {
        inANegatedbuiltinLiteral(node);
        if(node.getBuiltin() != null)
        {
            node.getBuiltin().apply(this);
        }
        if(node.getTNot() != null)
        {
            node.getTNot().apply(this);
        }
        outANegatedbuiltinLiteral(node);
    }

    public void inAPredicate(APredicate node)
    {
        defaultIn(node);
    }

    public void outAPredicate(APredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredicate(APredicate node)
    {
        inAPredicate(node);
        if(node.getParamlist() != null)
        {
            node.getParamlist().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outAPredicate(node);
    }

    public void inAParamlist(AParamlist node)
    {
        defaultIn(node);
    }

    public void outAParamlist(AParamlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamlist(AParamlist node)
    {
        inAParamlist(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        outAParamlist(node);
    }

    public void inATermTermlist(ATermTermlist node)
    {
        defaultIn(node);
    }

    public void outATermTermlist(ATermTermlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermTermlist(ATermTermlist node)
    {
        inATermTermlist(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermTermlist(node);
    }

    public void inATermlist(ATermlist node)
    {
        defaultIn(node);
    }

    public void outATermlist(ATermlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermlist(ATermlist node)
    {
        inATermlist(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getTermlist() != null)
        {
            node.getTermlist().apply(this);
        }
        outATermlist(node);
    }

    public void inAIntlist(AIntlist node)
    {
        defaultIn(node);
    }

    public void outAIntlist(AIntlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntlist(AIntlist node)
    {
        inAIntlist(node);
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getIntlist() != null)
        {
            node.getIntlist().apply(this);
        }
        outAIntlist(node);
    }

    public void inAIntIntlist(AIntIntlist node)
    {
        defaultIn(node);
    }

    public void outAIntIntlist(AIntIntlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntIntlist(AIntIntlist node)
    {
        inAIntIntlist(node);
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        outAIntIntlist(node);
    }

    public void inAFunctionTerm(AFunctionTerm node)
    {
        defaultIn(node);
    }

    public void outAFunctionTerm(AFunctionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionTerm(AFunctionTerm node)
    {
        inAFunctionTerm(node);
        if(node.getParamlist() != null)
        {
            node.getParamlist().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outAFunctionTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getTVariable() != null)
        {
            node.getTVariable().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAIntegerTerm(AIntegerTerm node)
    {
        defaultIn(node);
    }

    public void outAIntegerTerm(AIntegerTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTerm(AIntegerTerm node)
    {
        inAIntegerTerm(node);
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        outAIntegerTerm(node);
    }

    public void inAIntegerlTerm(AIntegerlTerm node)
    {
        defaultIn(node);
    }

    public void outAIntegerlTerm(AIntegerlTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerlTerm(AIntegerlTerm node)
    {
        inAIntegerlTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreInteger() != null)
        {
            node.getTPreInteger().apply(this);
        }
        outAIntegerlTerm(node);
    }

    public void inAStringTerm(AStringTerm node)
    {
        defaultIn(node);
    }

    public void outAStringTerm(AStringTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        inAStringTerm(node);
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        outAStringTerm(node);
    }

    public void inAStringlTerm(AStringlTerm node)
    {
        defaultIn(node);
    }

    public void outAStringlTerm(AStringlTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringlTerm(AStringlTerm node)
    {
        inAStringlTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreString() != null)
        {
            node.getTPreString().apply(this);
        }
        outAStringlTerm(node);
    }

    public void inADecimalTerm(ADecimalTerm node)
    {
        defaultIn(node);
    }

    public void outADecimalTerm(ADecimalTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalTerm(ADecimalTerm node)
    {
        inADecimalTerm(node);
        if(node.getTDec() != null)
        {
            node.getTDec().apply(this);
        }
        outADecimalTerm(node);
    }

    public void inADecimallTerm(ADecimallTerm node)
    {
        defaultIn(node);
    }

    public void outADecimallTerm(ADecimallTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimallTerm(ADecimallTerm node)
    {
        inADecimallTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTDec() != null)
        {
            node.getTDec().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDecimal() != null)
        {
            node.getTPreDecimal().apply(this);
        }
        outADecimallTerm(node);
    }

    public void inASqnameTerm(ASqnameTerm node)
    {
        defaultIn(node);
    }

    public void outASqnameTerm(ASqnameTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASqnameTerm(ASqnameTerm node)
    {
        inASqnameTerm(node);
        if(node.getTSq() != null)
        {
            node.getTSq().apply(this);
        }
        outASqnameTerm(node);
    }

    public void inASqnamelTerm(ASqnamelTerm node)
    {
        defaultIn(node);
    }

    public void outASqnamelTerm(ASqnamelTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASqnamelTerm(ASqnamelTerm node)
    {
        inASqnamelTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTSq() != null)
        {
            node.getTSq().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreSqname() != null)
        {
            node.getTPreSqname().apply(this);
        }
        outASqnamelTerm(node);
    }

    public void inAIriTerm(AIriTerm node)
    {
        defaultIn(node);
    }

    public void outAIriTerm(AIriTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIriTerm(AIriTerm node)
    {
        inAIriTerm(node);
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        if(node.getTUnders() != null)
        {
            node.getTUnders().apply(this);
        }
        outAIriTerm(node);
    }

    public void inAIrilTerm(AIrilTerm node)
    {
        defaultIn(node);
    }

    public void outAIrilTerm(AIrilTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIrilTerm(AIrilTerm node)
    {
        inAIrilTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreIri() != null)
        {
            node.getTPreIri().apply(this);
        }
        outAIrilTerm(node);
    }

    public void inABooleanTerm(ABooleanTerm node)
    {
        defaultIn(node);
    }

    public void outABooleanTerm(ABooleanTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanTerm(ABooleanTerm node)
    {
        inABooleanTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreBoolean() != null)
        {
            node.getTPreBoolean().apply(this);
        }
        outABooleanTerm(node);
    }

    public void inADoubleTerm(ADoubleTerm node)
    {
        defaultIn(node);
    }

    public void outADoubleTerm(ADoubleTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleTerm(ADoubleTerm node)
    {
        inADoubleTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTDec() != null)
        {
            node.getTDec().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDouble() != null)
        {
            node.getTPreDouble().apply(this);
        }
        outADoubleTerm(node);
    }

    public void inAFloatTerm(AFloatTerm node)
    {
        defaultIn(node);
    }

    public void outAFloatTerm(AFloatTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTerm(AFloatTerm node)
    {
        inAFloatTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTDec() != null)
        {
            node.getTDec().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreFloat() != null)
        {
            node.getTPreFloat().apply(this);
        }
        outAFloatTerm(node);
    }

    public void inADateTerm(ADateTerm node)
    {
        defaultIn(node);
    }

    public void outADateTerm(ADateTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateTerm(ADateTerm node)
    {
        inADateTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDate() != null)
        {
            node.getTPreDate().apply(this);
        }
        outADateTerm(node);
    }

    public void inADatetzTerm(ADatetzTerm node)
    {
        defaultIn(node);
    }

    public void outADatetzTerm(ADatetzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetzTerm(ADatetzTerm node)
    {
        inADatetzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDate() != null)
        {
            node.getTPreDate().apply(this);
        }
        outADatetzTerm(node);
    }

    public void inATimeisTerm(ATimeisTerm node)
    {
        defaultIn(node);
    }

    public void outATimeisTerm(ATimeisTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeisTerm(ATimeisTerm node)
    {
        inATimeisTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreTime() != null)
        {
            node.getTPreTime().apply(this);
        }
        outATimeisTerm(node);
    }

    public void inATimeistzTerm(ATimeistzTerm node)
    {
        defaultIn(node);
    }

    public void outATimeistzTerm(ATimeistzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeistzTerm(ATimeistzTerm node)
    {
        inATimeistzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreTime() != null)
        {
            node.getTPreTime().apply(this);
        }
        outATimeistzTerm(node);
    }

    public void inATimefsTerm(ATimefsTerm node)
    {
        defaultIn(node);
    }

    public void outATimefsTerm(ATimefsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimefsTerm(ATimefsTerm node)
    {
        inATimefsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreTime() != null)
        {
            node.getTPreTime().apply(this);
        }
        outATimefsTerm(node);
    }

    public void inATimefstzTerm(ATimefstzTerm node)
    {
        defaultIn(node);
    }

    public void outATimefstzTerm(ATimefstzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimefstzTerm(ATimefstzTerm node)
    {
        inATimefstzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreTime() != null)
        {
            node.getTPreTime().apply(this);
        }
        outATimefstzTerm(node);
    }

    public void inATimemsTerm(ATimemsTerm node)
    {
        defaultIn(node);
    }

    public void outATimemsTerm(ATimemsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimemsTerm(ATimemsTerm node)
    {
        inATimemsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getMillisecond() != null)
        {
            node.getMillisecond().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreTime() != null)
        {
            node.getTPreTime().apply(this);
        }
        outATimemsTerm(node);
    }

    public void inATimemstzTerm(ATimemstzTerm node)
    {
        defaultIn(node);
    }

    public void outATimemstzTerm(ATimemstzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimemstzTerm(ATimemstzTerm node)
    {
        inATimemstzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getMillisecond() != null)
        {
            node.getMillisecond().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreTime() != null)
        {
            node.getTPreTime().apply(this);
        }
        outATimemstzTerm(node);
    }

    public void inADatetimeisTerm(ADatetimeisTerm node)
    {
        defaultIn(node);
    }

    public void outADatetimeisTerm(ADatetimeisTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimeisTerm(ADatetimeisTerm node)
    {
        inADatetimeisTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDatetime() != null)
        {
            node.getTPreDatetime().apply(this);
        }
        outADatetimeisTerm(node);
    }

    public void inADatetimeistzTerm(ADatetimeistzTerm node)
    {
        defaultIn(node);
    }

    public void outADatetimeistzTerm(ADatetimeistzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimeistzTerm(ADatetimeistzTerm node)
    {
        inADatetimeistzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC7() != null)
        {
            node.getC7().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC6() != null)
        {
            node.getC6().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDatetime() != null)
        {
            node.getTPreDatetime().apply(this);
        }
        outADatetimeistzTerm(node);
    }

    public void inADatetimefsTerm(ADatetimefsTerm node)
    {
        defaultIn(node);
    }

    public void outADatetimefsTerm(ADatetimefsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimefsTerm(ADatetimefsTerm node)
    {
        inADatetimefsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDatetime() != null)
        {
            node.getTPreDatetime().apply(this);
        }
        outADatetimefsTerm(node);
    }

    public void inADatetimefstzTerm(ADatetimefstzTerm node)
    {
        defaultIn(node);
    }

    public void outADatetimefstzTerm(ADatetimefstzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimefstzTerm(ADatetimefstzTerm node)
    {
        inADatetimefstzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC7() != null)
        {
            node.getC7().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC6() != null)
        {
            node.getC6().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDatetime() != null)
        {
            node.getTPreDatetime().apply(this);
        }
        outADatetimefstzTerm(node);
    }

    public void inADatetimemsTerm(ADatetimemsTerm node)
    {
        defaultIn(node);
    }

    public void outADatetimemsTerm(ADatetimemsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimemsTerm(ADatetimemsTerm node)
    {
        inADatetimemsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getMillisecond() != null)
        {
            node.getMillisecond().apply(this);
        }
        if(node.getC6() != null)
        {
            node.getC6().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDatetime() != null)
        {
            node.getTPreDatetime().apply(this);
        }
        outADatetimemsTerm(node);
    }

    public void inADatetimemstzTerm(ADatetimemstzTerm node)
    {
        defaultIn(node);
    }

    public void outADatetimemstzTerm(ADatetimemstzTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimemstzTerm(ADatetimemstzTerm node)
    {
        inADatetimemstzTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTzminute() != null)
        {
            node.getTzminute().apply(this);
        }
        if(node.getC8() != null)
        {
            node.getC8().apply(this);
        }
        if(node.getTzhour() != null)
        {
            node.getTzhour().apply(this);
        }
        if(node.getC7() != null)
        {
            node.getC7().apply(this);
        }
        if(node.getMillisecond() != null)
        {
            node.getMillisecond().apply(this);
        }
        if(node.getC6() != null)
        {
            node.getC6().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDatetime() != null)
        {
            node.getTPreDatetime().apply(this);
        }
        outADatetimemstzTerm(node);
    }

    public void inADurationisTerm(ADurationisTerm node)
    {
        defaultIn(node);
    }

    public void outADurationisTerm(ADurationisTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADurationisTerm(ADurationisTerm node)
    {
        inADurationisTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDuration() != null)
        {
            node.getTPreDuration().apply(this);
        }
        outADurationisTerm(node);
    }

    public void inADurationfsTerm(ADurationfsTerm node)
    {
        defaultIn(node);
    }

    public void outADurationfsTerm(ADurationfsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADurationfsTerm(ADurationfsTerm node)
    {
        inADurationfsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDuration() != null)
        {
            node.getTPreDuration().apply(this);
        }
        outADurationfsTerm(node);
    }

    public void inADurationmsTerm(ADurationmsTerm node)
    {
        defaultIn(node);
    }

    public void outADurationmsTerm(ADurationmsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADurationmsTerm(ADurationmsTerm node)
    {
        inADurationmsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getMillisecond() != null)
        {
            node.getMillisecond().apply(this);
        }
        if(node.getC6() != null)
        {
            node.getC6().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC5() != null)
        {
            node.getC5().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDuration() != null)
        {
            node.getTPreDuration().apply(this);
        }
        outADurationmsTerm(node);
    }

    public void inADaytimedurationfsTerm(ADaytimedurationfsTerm node)
    {
        defaultIn(node);
    }

    public void outADaytimedurationfsTerm(ADaytimedurationfsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaytimedurationfsTerm(ADaytimedurationfsTerm node)
    {
        inADaytimedurationfsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDaytimeduration() != null)
        {
            node.getTPreDaytimeduration().apply(this);
        }
        outADaytimedurationfsTerm(node);
    }

    public void inADaytimedurationmsTerm(ADaytimedurationmsTerm node)
    {
        defaultIn(node);
    }

    public void outADaytimedurationmsTerm(ADaytimedurationmsTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaytimedurationmsTerm(ADaytimedurationmsTerm node)
    {
        inADaytimedurationmsTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getMillisecond() != null)
        {
            node.getMillisecond().apply(this);
        }
        if(node.getC4() != null)
        {
            node.getC4().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getC3() != null)
        {
            node.getC3().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getDay() != null)
        {
            node.getDay().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreDaytimeduration() != null)
        {
            node.getTPreDaytimeduration().apply(this);
        }
        outADaytimedurationmsTerm(node);
    }

    public void inAYearmonthdurationTerm(AYearmonthdurationTerm node)
    {
        defaultIn(node);
    }

    public void outAYearmonthdurationTerm(AYearmonthdurationTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYearmonthdurationTerm(AYearmonthdurationTerm node)
    {
        inAYearmonthdurationTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getMonth() != null)
        {
            node.getMonth().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getYear() != null)
        {
            node.getYear().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreYearmonthduration() != null)
        {
            node.getTPreYearmonthduration().apply(this);
        }
        outAYearmonthdurationTerm(node);
    }

    public void inAGdayTerm(AGdayTerm node)
    {
        defaultIn(node);
    }

    public void outAGdayTerm(AGdayTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGdayTerm(AGdayTerm node)
    {
        inAGdayTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreGday() != null)
        {
            node.getTPreGday().apply(this);
        }
        outAGdayTerm(node);
    }

    public void inAGmonthTerm(AGmonthTerm node)
    {
        defaultIn(node);
    }

    public void outAGmonthTerm(AGmonthTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGmonthTerm(AGmonthTerm node)
    {
        inAGmonthTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreGmonth() != null)
        {
            node.getTPreGmonth().apply(this);
        }
        outAGmonthTerm(node);
    }

    public void inAGyearTerm(AGyearTerm node)
    {
        defaultIn(node);
    }

    public void outAGyearTerm(AGyearTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGyearTerm(AGyearTerm node)
    {
        inAGyearTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTInt() != null)
        {
            node.getTInt().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreGyear() != null)
        {
            node.getTPreGyear().apply(this);
        }
        outAGyearTerm(node);
    }

    public void inAGyearmonthTerm(AGyearmonthTerm node)
    {
        defaultIn(node);
    }

    public void outAGyearmonthTerm(AGyearmonthTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGyearmonthTerm(AGyearmonthTerm node)
    {
        inAGyearmonthTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getIntlist() != null)
        {
            node.getIntlist().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreGyearmonth() != null)
        {
            node.getTPreGyearmonth().apply(this);
        }
        outAGyearmonthTerm(node);
    }

    public void inAGmonthdayTerm(AGmonthdayTerm node)
    {
        defaultIn(node);
    }

    public void outAGmonthdayTerm(AGmonthdayTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGmonthdayTerm(AGmonthdayTerm node)
    {
        inAGmonthdayTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getIntlist() != null)
        {
            node.getIntlist().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreGmonthday() != null)
        {
            node.getTPreGmonthday().apply(this);
        }
        outAGmonthdayTerm(node);
    }

    public void inABase64binaryTerm(ABase64binaryTerm node)
    {
        defaultIn(node);
    }

    public void outABase64binaryTerm(ABase64binaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABase64binaryTerm(ABase64binaryTerm node)
    {
        inABase64binaryTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreBase64() != null)
        {
            node.getTPreBase64().apply(this);
        }
        outABase64binaryTerm(node);
    }

    public void inAHexbinaryTerm(AHexbinaryTerm node)
    {
        defaultIn(node);
    }

    public void outAHexbinaryTerm(AHexbinaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexbinaryTerm(AHexbinaryTerm node)
    {
        inAHexbinaryTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getTStr() != null)
        {
            node.getTStr().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreHex() != null)
        {
            node.getTPreHex().apply(this);
        }
        outAHexbinaryTerm(node);
    }

    public void inAXmlliteralTerm(AXmlliteralTerm node)
    {
        defaultIn(node);
    }

    public void outAXmlliteralTerm(AXmlliteralTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXmlliteralTerm(AXmlliteralTerm node)
    {
        inAXmlliteralTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreXmlliteral() != null)
        {
            node.getTPreXmlliteral().apply(this);
        }
        outAXmlliteralTerm(node);
    }

    public void inAXmlliterallangTerm(AXmlliterallangTerm node)
    {
        defaultIn(node);
    }

    public void outAXmlliterallangTerm(AXmlliterallangTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXmlliterallangTerm(AXmlliterallangTerm node)
    {
        inAXmlliterallangTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getLang() != null)
        {
            node.getLang().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreXmlliteral() != null)
        {
            node.getTPreXmlliteral().apply(this);
        }
        outAXmlliterallangTerm(node);
    }

    public void inARdftextTerm(ARdftextTerm node)
    {
        defaultIn(node);
    }

    public void outARdftextTerm(ARdftextTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARdftextTerm(ARdftextTerm node)
    {
        inARdftextTerm(node);
        if(node.getTRpar() != null)
        {
            node.getTRpar().apply(this);
        }
        if(node.getLang() != null)
        {
            node.getLang().apply(this);
        }
        if(node.getTComma() != null)
        {
            node.getTComma().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getTLpar() != null)
        {
            node.getTLpar().apply(this);
        }
        if(node.getTPreRdftext() != null)
        {
            node.getTPreRdftext().apply(this);
        }
        outARdftextTerm(node);
    }

    public void inABinaryBuiltin(ABinaryBuiltin node)
    {
        defaultIn(node);
    }

    public void outABinaryBuiltin(ABinaryBuiltin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryBuiltin(ABinaryBuiltin node)
    {
        inABinaryBuiltin(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getTBinOp() != null)
        {
            node.getTBinOp().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outABinaryBuiltin(node);
    }

    public void inAEqualsBuiltin(AEqualsBuiltin node)
    {
        defaultIn(node);
    }

    public void outAEqualsBuiltin(AEqualsBuiltin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsBuiltin(AEqualsBuiltin node)
    {
        inAEqualsBuiltin(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getTEq() != null)
        {
            node.getTEq().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAEqualsBuiltin(node);
    }

    public void inATernaryBuiltin(ATernaryBuiltin node)
    {
        defaultIn(node);
    }

    public void outATernaryBuiltin(ATernaryBuiltin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernaryBuiltin(ATernaryBuiltin node)
    {
        inATernaryBuiltin(node);
        if(node.getThird() != null)
        {
            node.getThird().apply(this);
        }
        if(node.getTEq() != null)
        {
            node.getTEq().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getTTerOp() != null)
        {
            node.getTTerOp().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outATernaryBuiltin(node);
    }
}
