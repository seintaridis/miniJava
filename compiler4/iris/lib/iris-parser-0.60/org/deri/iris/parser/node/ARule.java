/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.deri.iris.parser.node;

import org.deri.iris.parser.analysis.*;

@SuppressWarnings("nls")
public final class ARule extends PRule
{
    private PLitlist _head_;
    private TTImpliedby _tImpliedby_;
    private PLitlist _body_;
    private TTDot _tDot_;

    public ARule()
    {
        // Constructor
    }

    public ARule(
        @SuppressWarnings("hiding") PLitlist _head_,
        @SuppressWarnings("hiding") TTImpliedby _tImpliedby_,
        @SuppressWarnings("hiding") PLitlist _body_,
        @SuppressWarnings("hiding") TTDot _tDot_)
    {
        // Constructor
        setHead(_head_);

        setTImpliedby(_tImpliedby_);

        setBody(_body_);

        setTDot(_tDot_);

    }

    @Override
    public Object clone()
    {
        return new ARule(
            cloneNode(this._head_),
            cloneNode(this._tImpliedby_),
            cloneNode(this._body_),
            cloneNode(this._tDot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule(this);
    }

    public PLitlist getHead()
    {
        return this._head_;
    }

    public void setHead(PLitlist node)
    {
        if(this._head_ != null)
        {
            this._head_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._head_ = node;
    }

    public TTImpliedby getTImpliedby()
    {
        return this._tImpliedby_;
    }

    public void setTImpliedby(TTImpliedby node)
    {
        if(this._tImpliedby_ != null)
        {
            this._tImpliedby_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tImpliedby_ = node;
    }

    public PLitlist getBody()
    {
        return this._body_;
    }

    public void setBody(PLitlist node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    public TTDot getTDot()
    {
        return this._tDot_;
    }

    public void setTDot(TTDot node)
    {
        if(this._tDot_ != null)
        {
            this._tDot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tDot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._head_)
            + toString(this._tImpliedby_)
            + toString(this._body_)
            + toString(this._tDot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._head_ == child)
        {
            this._head_ = null;
            return;
        }

        if(this._tImpliedby_ == child)
        {
            this._tImpliedby_ = null;
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        if(this._tDot_ == child)
        {
            this._tDot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._head_ == oldChild)
        {
            setHead((PLitlist) newChild);
            return;
        }

        if(this._tImpliedby_ == oldChild)
        {
            setTImpliedby((TTImpliedby) newChild);
            return;
        }

        if(this._body_ == oldChild)
        {
            setBody((PLitlist) newChild);
            return;
        }

        if(this._tDot_ == oldChild)
        {
            setTDot((TTDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
